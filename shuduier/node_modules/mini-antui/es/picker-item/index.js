var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Component({
  props: {
    className: '',
    value: '',
    placeholder: '',
    onSelect: function onSelect() {}
  },
  didMount: function didMount() {
    this.dataset = {};
    for (var key in this.props) {
      if (/data-/gi.test(key)) {
        this.dataset[key.replace(/data-/gi, '')] = this.props[key];
      }
    }
  },

  methods: {
    fmtEvent: function fmtEvent(e) {
      return _extends({}, e, {
        currentTarget: { dataset: this.dataset },
        target: { dataset: this.dataset, targetDataset: this.dataset }
      });
    },
    onPickerTap: function onPickerTap(e) {
      var event = this.fmtEvent(e);
      this.props.onPickerTap(event);
    }
  }
});